package edu.utc.atc.components;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.VerticalLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.util.ShapeUtilities;
import org.vaadin.addon.JFreeChartWrapper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

public class ChartComponent extends CustomComponent {

    /**
     *
     */
    private static final long serialVersionUID = -6455994201016157559L;
    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    protected VerticalLayout mainLayout;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     * <p>
     * The constructor will not be automatically regenerated by the
     * visual editor.
     *
     * @param chartTimes
     * @param date
     * @param chartTimes
     */
    public ChartComponent() {
        buildEmptyLayout();
        setCompositionRoot(mainLayout);
    }

    public ChartComponent(Date date, ArrayList<Date> chartTimes, ArrayList<String> chartNames) {
        buildMainLayout(date, chartTimes, chartNames);
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout(Date date, ArrayList<Date> chartTimes, ArrayList<String> chartNames) {
        // common part: create layout
        mainLayout = new VerticalLayout();
        //mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        //Window main = new Window();

        TimeSeriesCollection dataset = new TimeSeriesCollection();


        TimeSeries eventTime = new TimeSeries("Event Time");
        dataset.addSeries(eventTime);
        eventTime.addOrUpdate(new Second(date), 0);

        //ArrayList<TimeSeries> chartList = new ArrayList<TimeSeries>();
        TimeSeries arrivalTimeSeries = new TimeSeries("Seismic Wave");
        dataset.addSeries(arrivalTimeSeries);

        for (Date chartTime : chartTimes) {

            arrivalTimeSeries.addOrUpdate(new Second(chartTime), 0);

        }


        //dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Arrival Times",
                "Time",
                "",
                dataset,
                true,
                true,
                false

        );
        XYPlot plot = (XYPlot) chart.getPlot();

        XYLineAndShapeRenderer r = (XYLineAndShapeRenderer) plot.getRenderer();
        try {
            ChartUtilities.saveChartAsPNG(new File("soft3d.png"), chart, 400, 300);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        for (int i = 0; i < dataset.getSeriesCount(); i++) {
            //Enables points for the charts and series for the waves also sets the icon to a diamond
            r.setSeriesShape(i, ShapeUtilities.createDiamond(5));
            r.setSeriesItemLabelsVisible(i, true);
            r.setSeriesShapesVisible(i, true);
            r.setSeriesLinesVisible(i, false);
        }

        ValueAxis range = plot.getRangeAxis();
        range.setVisible(false);
        ValueAxis domain = plot.getDomainAxis();
        domain.setVisible(true);
        /*
         * 
         
        StreamSource ss = new StreamSource() {
            InputStream is = new ByteArrayInputStream("some silly text content".getBytes());
            @Override
            public InputStream getStream() {
                return is;
            }
       
        StreamResource sr = new StreamResource(ss, "export", YourApplicationInstance);
        this.getMainWindow().open(sr, "_blank");
        
         */


        JFreeChartWrapper wrapper = new JFreeChartWrapper(chart) {

            /**
             *
             */

            private static final long serialVersionUID = -3212911599395980433L;


            @Override
            public void attach() {
                super.attach();
                setResource("src", getSource());
            }

        };
        //Sets height of wrapper in vertical layout
        wrapper.setHeight("200");
        mainLayout.addComponent(wrapper);


        return mainLayout;
    }

    private VerticalLayout buildEmptyLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        //mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");

        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        //Window main = new Window();

        //final TimeSeries series = new TimeSeries("Arrival Times");


        final TimeSeriesCollection dataset = new TimeSeriesCollection();
        final JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "Arrival Times",
                "Time",
                "",
                dataset,
                true,
                true,
                false

        );

        XYPlot plot = (XYPlot) chart.getPlot();
        ValueAxis range = plot.getRangeAxis();
        range.setVisible(false);


        JFreeChartWrapper wrapper = new JFreeChartWrapper(chart) {

            /**
             *
             */
            private static final long serialVersionUID = -3212911599395980433L;

            @Override
            public void attach() {
                super.attach();
                setResource("src", getSource());
            }
        };

        wrapper.setHeight("200");
        mainLayout.addComponent(wrapper);


        return mainLayout;
    }

}
