package edu.utc.atc;



import java.io.IOException;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import edu.sc.seis.TauP.Arrival;
import edu.sc.seis.TauP.SeismicPhase;
import edu.sc.seis.TauP.TauModelException;

public class TimeCalcCompositeOLD extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	//@AutoGenerated
	//private TabSheet tabSheet_1;
	@AutoGenerated
	private HorizontalSplitPanel horizontalSplitPanel_1;
	@AutoGenerated
	private Table resultsTable = null;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	protected Button submitButton;
	@AutoGenerated
	private ComboBox modelBox;
	@AutoGenerated
	private TextField depthField;
	@AutoGenerated
	private TextField distanceField;
	@AutoGenerated
	private TextField textField_1;
	@AutoGenerated
	private TextField textField_2;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TimeCalcCompositeOLD() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	public void addComponent(Button button) {
		// TODO Auto-generated method stub
		
	}

	public void addComponent(Label label) {
		// TODO Auto-generated method stub
		
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100%");
		
		// horizonatlSplitPanel_1 
		horizontalSplitPanel_1 = buildHorizontalSplitPanel_1();
		horizontalSplitPanel_1.setMaxSplitPosition(200, UNITS_PIXELS);
		horizontalSplitPanel_1.setMinSplitPosition(150, UNITS_PIXELS);
		mainLayout.addComponent(horizontalSplitPanel_1, "top:0.0px;right:40.0px;bottom:0.0px;left:0.0px;");
		return mainLayout;
	}


	@AutoGenerated
	private HorizontalSplitPanel buildHorizontalSplitPanel_1() {
		// common part: create layout
		horizontalSplitPanel_1 = new HorizontalSplitPanel();
		horizontalSplitPanel_1.setImmediate(false);
		horizontalSplitPanel_1.setWidth("100%");
		horizontalSplitPanel_1.setHeight("100.0%");
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		horizontalSplitPanel_1.addComponent(verticalLayout_1);
		
		// resultsTable
		resultsTable = new Table();
		resultsTable.setImmediate(false);
		resultsTable.setWidth("100.0%");
		resultsTable.setHeight("100.0%");
		resultsTable.addContainerProperty("Phase", Double.class, "none");
		resultsTable.addContainerProperty("Time", Double.class, "none");
		resultsTable.addContainerProperty("Distance", Double.class, "none");
		resultsTable.addContainerProperty("Ray Param", Double.class, "none");
		resultsTable.addContainerProperty("Ray Param Index", Double.class, "none");
		resultsTable.addContainerProperty("Name", String.class, "none");
		resultsTable.addContainerProperty("Purist Name", String.class, "none");
		resultsTable.addContainerProperty("Source Depth", Double.class, "none");
		resultsTable.addContainerProperty("Take Off Angle", Double.class, "none");
		resultsTable.addContainerProperty("Incident Angle", Double.class, "none");
		
		horizontalSplitPanel_1.addComponent(resultsTable);
		
		return horizontalSplitPanel_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("308px");
		verticalLayout_1.setMargin(false);
		
		// textField_2
		textField_2 = new TextField();
		textField_2.setImmediate(false);
		textField_2.setWidth("100.0%");
		textField_2.setHeight("-1px");
		verticalLayout_1.addComponent(textField_2);
		
		// textField_1
		textField_1 = new TextField();
		textField_1.setImmediate(false);
		textField_1.setWidth("100.0%");
		textField_1.setHeight("-1px");
		verticalLayout_1.addComponent(textField_1);
		
		// distanceField
		distanceField = new TextField();
		distanceField.setImmediate(false);
		distanceField.setWidth("100.0%");
		distanceField.setHeight("-1px");
		distanceField.setInputPrompt("Distance deg");
		verticalLayout_1.addComponent(distanceField);
		
		// depthField
		depthField = new TextField();
		depthField.setImmediate(false);
		depthField.setWidth("100.0%");
		depthField.setHeight("-1px");
		depthField.setInputPrompt("Depth");
		verticalLayout_1.addComponent(depthField);
		
		// modelBox
		modelBox = new ComboBox();
		modelBox.setImmediate(false);
		modelBox.setWidth("100.0%");
		modelBox.setHeight("24px");
		modelBox.setInputPrompt("Model");
		modelBox.addItem("iasp91");
		modelBox.addItem("prem");
		modelBox.addItem("ak135");
		modelBox.addItem("qdt");
		verticalLayout_1.addComponent(modelBox);
		
		// submitButton
		submitButton = new Button();
		submitButton.setCaption("Submit");
		submitButton.setImmediate(true);
		submitButton.setWidth("-1px");
		submitButton.setHeight("-1px");
		submitButton.addClickListener(new Button.ClickListener() {
		    /**
			 * 
			 */
			private static final long serialVersionUID = -5638665006501170673L;

			public void buttonClick(ClickEvent event) {
				processForm();
		    }
			
		});
		verticalLayout_1.addComponent(submitButton);
		
		
		return verticalLayout_1;
	}
	private void processForm() {
		try {
    		System.out.println(modelBox.getValue().toString());
			@SuppressWarnings("unused")
			ATCTime atct = new ATCTime(Integer.parseInt(distanceField.getValue()),
									   Double.parseDouble(depthField.getValue()), 
									   modelBox.getValue().toString());
			
			
			BeanContainer<String, Arrival> arrivalTimes = new BeanContainer<String, Arrival>(Arrival.class);
			//BeanContainer<String, ArrivalForm>
			for(int i = 0; i < atct.getTable().size(); i ++)
			{
				arrivalTimes.setBeanIdProperty("name");
				arrivalTimes.addBean(new Arrival(atct.getTable().get(i).getPhase(),
												 atct.getTable().get(i).getTime(),
												 atct.getTable().get(i).getDist(),
												 atct.getTable().get(i).getRayParam(),
												 atct.getTable().get(i).getRayParamIndex(),
												 atct.getTable().get(i).getName(),
												 atct.getTable().get(i).getPuristName(),
												 atct.getTable().get(i).getSourceDepth(),
												 atct.getTable().get(i).getTakeoffAngle(),
												 atct.getTable().get(i).getIncidentAngle()));
			}
			
			horizontalSplitPanel_1.removeComponent(resultsTable);
			resultsTable = new Table("results", arrivalTimes);
			resultsTable.setImmediate(false);
			resultsTable.setWidth("100.0%");
			resultsTable.setHeight("100.0%");
			horizontalSplitPanel_1.addComponent(resultsTable);
			System.out.println("Table Size is now " + resultsTable.size());
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			System.out.println("Bad Number");
		} catch (TauModelException e) {
			// TODO Auto-generated catch block
			System.out.println("No Model");
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("IO");
		}

	}
	
	private class ArrivalDisplayFormatter {
		
		SeismicPhase phase;
		double time;
		double dist;
		double rayParam;	
		int rayParamIndex;
		String name;
		String puristsName;
		double sourceDepth;
		double takeoffAngle;
		double incidentAngle;

		protected ArrivalDisplayFormatter(Arrival a) {
			
			phase =  a.getPhase();
			time = a.getTime();
			dist = a.getDist();
			rayParam = a.getRayParam();	
			rayParamIndex =  a.getRayParamIndex();
			name = a.getName();
			puristsName =  a.getPuristName();
			sourceDepth =  a.getSourceDepth();
			takeoffAngle =  a.getTakeoffAngle();
			incidentAngle =  a.getIncidentAngle();
			
		}
		
		protected ArrivalDisplayFormatter(String name, double time)
		{
			//this.name = 	
			
		}
		
		
		
			
			
		
		
	}
}
